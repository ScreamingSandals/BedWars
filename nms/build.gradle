import me.kcra.takenaka.gradle.BuildConfig

import java.util.function.Consumer
import java.util.function.Supplier

apply plugin: 'me.kcra.takenaka.accessor'

dependencies {
    mappingBundle "me.kcra.takenaka:mappings:1.8.8+1.21.5"
    api "me.kcra.takenaka:generator-accessor-runtime:${BuildConfig.BUILD_VERSION}"
}

// after any changes in this file, please run the generateAccessors task to see changes in your ide

accessors {
    // uncomment this and remove the mappingBundle dependency,
    // if you want to develop against custom versions
    /*versionRange('1.8.8', '1.21.5') {
        // exclude 1.20, 1.20.3, 1.20.5 and 1.21.2 - hotfixed versions
        // exclude 1.16 and 1.10.1, they don't have most mappings and are basically not used at all
        // exclude 1.8.9, client-only update - no Spigot mappings, no thank you
        // exclude 1.9.1 and 1.9.3 - no mappings at all
        exclude '1.16', '1.10.1', '1.8.9', '1.9.1', '1.9.3', '1.20', '1.20.3', '1.20.5', '1.21.2'

        // include only releases, no snapshots
        includeTypes 'release'
    }*/

    basePackage 'org.screamingsandals.bedwars.lib.nms.accessors'
    namespaces 'mojang', 'spigot'
    accessorType 'reflection'
    mappingWebsite 'https://mappings.dev'

    var CompoundTag = mapClass('net.minecraft.nbt.CompoundTag') {
        constructor()
        method void, 'putInt', String, int
        method void, 'putString', String, String
        method 'net.minecraft.nbt.Tag', 'put', String, 'net.minecraft.nbt.Tag'
    }
    mapClass('net.minecraft.nbt.TagParser') {
        methodChain {
            it.item(CompoundTag, 'parseCompoundFully', String)
            it.item(CompoundTag, 'parseTag', String)
        }
    }
    var Component = mapClass('net.minecraft.network.chat.Component') {
        getter String, 'coloredString'
        getter String, 'string'
    }
    var Attribute = mapClass 'net.minecraft.world.entity.ai.attributes.Attribute'
    mapClass('net.minecraft.core.RegistryAccess') {
        field 'net.minecraft.core.RegistryAccess$Frozen', 'EMPTY'
    }
    mapClass('net.minecraft.network.chat.Component$Serializer') {
        method Component, 'fromJson', String // 1.16 and below
        method 'net.minecraft.network.chat.MutableComponent', 'fromJson', String // 1.16.1 and higher
        method 'net.minecraft.network.chat.MutableComponent', 'fromJsonLenient', String, 'net.minecraft.core.HolderLookup$Provider' // 1.20.5+
    }
    var SynchedEntityData = mapClass('net.minecraft.network.syncher.SynchedEntityData') {
        method void, 'watch', int, Object
        method List, 'packDirty'
        method void, 'clearDirty'
        getter List, 'all'
        getter List, 'nonDefaultValues'
    }
    var Level = mapClass('net.minecraft.world.level.Level') {
        getter Supplier, 'profilerSupplier' // 1.17-1.21.1, no longer needed for GoalSelector since 1.21.2
        getter 'net.minecraft.util.profiling.ProfilerFiller', 'profiler' // for something between new and old versions
        field 'net.minecraft.server.VVV.MethodProfiler', 'methodProfiler' // for older versions, Spigot mapped
    }
    var Entity = mapClass('net.minecraft.world.entity.Entity') {
        field Level, 'level'
        getter Level, 'commandSenderWorld'
        method boolean, 'saveAsPassenger', CompoundTag
        method void, 'load', CompoundTag
        method void, 'absSnapTo', double, double, double, float, float
        getter int, 'id'
        getter UUID, 'UUID'
        getter 'net.minecraft.world.entity.EntityType', 'type'
        getter SynchedEntityData, 'entityData'
        getter 'net.minecraft.world.phys.Vec3', 'deltaMovement'
        getter Component, 'customName'
        setter Component, 'customName'
        getter double, 'x'
        getter double, 'y'
        getter double, 'z'
        getter float, 'xRot'
        getter float, 'yRot'
        getter float, 'yHeadRot'
        getter boolean, 'customNameVisible'
        setter boolean, 'customNameVisible'
        getter boolean, 'invisible'
        setter boolean, 'invisible'
        getter boolean, 'noGravity'
        setter boolean, 'noGravity'
        method boolean, 'onGround'
        // old
        field float, 'yRot'
        field float, 'xRot'
        field double, 'x'
        field double, 'y'
        field double, 'z'
        setter String, 'customName' // Spigot mapped
    }
    mapClass('net.minecraft.world.entity.decoration.ArmorStand') {
        constructor Level, double, double, double
        getter boolean, 'small'
        setter boolean, 'small'
        setter boolean, 'showArms'
        setter boolean, 'noBasePlate'
        setter boolean, 'marker'
    }
    var PathfinderMob = mapClass 'net.minecraft.world.entity.PathfinderMob'
    var AttributeSupplier = mapClass('net.minecraft.world.entity.ai.attributes.AttributeSupplier') {
        field Map, 'instances'
    }
    var AttributeInstance = mapClass('net.minecraft.world.entity.ai.attributes.AttributeInstance') {
        constructor Attribute, Consumer
        constructor 'net.minecraft.core.Holder', Consumer // 1.20.5+
        getter double, 'value'
        setter double, 'baseValue'
    }
    var AttributeMap = mapClass('net.minecraft.world.entity.ai.attributes.AttributeMap') {
        method AttributeInstance, 'registerAttribute', Attribute
        field AttributeSupplier, 'supplier'
    }
    var LivingEntity = mapClass('net.minecraft.world.entity.LivingEntity') {
        method AttributeInstance, 'getAttribute', Attribute
        method AttributeInstance, 'getAttribute', 'net.minecraft.core.Holder'
        getter AttributeMap, 'attributes'
        getter 'net.minecraft.world.damagesource.CombatTracker', 'combatTracker'
    }
    var Mob = mapClass('net.minecraft.world.entity.Mob') {
        field 'net.minecraft.world.entity.ai.goal.GoalSelector', 'goalSelector'
        field 'net.minecraft.world.entity.ai.goal.GoalSelector', 'targetSelector'
        field LivingEntity, 'target'
    }
    var Packet = mapClass('net.minecraft.network.protocol.Packet')
    var ServerboundClientCommandPacket$Action = mapClass('net.minecraft.network.protocol.game.ServerboundClientCommandPacket$Action') {
        enumConstant 'PERFORM_RESPAWN'
    }
    var ServerboundClientCommandPacket = mapClass('net.minecraft.network.protocol.game.ServerboundClientCommandPacket') {
        constructor ServerboundClientCommandPacket$Action
    }
    var Connection = mapClass('net.minecraft.network.Connection') {
        field 'io.netty.channel.Channel', 'channel'
    }
    var ServerGamePacketListenerImpl = mapClass('net.minecraft.server.network.ServerGamePacketListenerImpl') {
        field Connection, 'connection' // <= 1.20.1
        method void, 'send', Packet // <= 1.20.1
        method void, 'handleClientCommand', ServerboundClientCommandPacket
    }
    mapClass('net.minecraft.server.network.ServerCommonPacketListenerImpl') { // 1.20.2+
        field Connection, 'connection'
        method void, 'send', Packet
    }
    mapClass('net.minecraft.server.level.ServerPlayer') {
        field ServerGamePacketListenerImpl, 'connection'
        method void, 'tellNeutralMobsThatIDied'
        setter Entity, 'camera'
    }
    mapClass('net.minecraft.world.entity.ai.attributes.Attributes') {
        fieldChain {
            it.item Attribute, 'MAX_HEALTH'
            it.item 'net.minecraft.core.Holder', 'MAX_HEALTH'
        }
        fieldChain {
            it.item Attribute, 'FOLLOW_RANGE'
            it.item 'net.minecraft.core.Holder', 'FOLLOW_RANGE'
        }
        fieldChain {
            it.item Attribute, 'KNOCKBACK_RESISTANCE'
            it.item 'net.minecraft.core.Holder', 'KNOCKBACK_RESISTANCE'
        }
        fieldChain {
            it.item Attribute, 'MOVEMENT_SPEED'
            it.item 'net.minecraft.core.Holder', 'MOVEMENT_SPEED'
        }
        fieldChain {
            it.item Attribute, 'FLYING_SPEED'
            it.item 'net.minecraft.core.Holder', 'FLYING_SPEED'
        }
        fieldChain {
            it.item Attribute, 'ATTACK_DAMAGE'
            it.item 'net.minecraft.core.Holder', 'ATTACK_DAMAGE'
        }
        fieldChain {
            it.item Attribute, 'ATTACK_KNOCKBACK'
            it.item 'net.minecraft.core.Holder', 'ATTACK_KNOCKBACK'
        }
        fieldChain {
            it.item Attribute, 'ATTACK_SPEED'
            it.item 'net.minecraft.core.Holder', 'ATTACK_SPEED'
        }
        fieldChain {
            it.item Attribute, 'ARMOR'
            it.item 'net.minecraft.core.Holder', 'ARMOR'
        }
        fieldChain {
            it.item Attribute, 'ARMOR_TOUGHNESS'
            it.item 'net.minecraft.core.Holder', 'ARMOR_TOUGHNESS'
        }
        fieldChain {
            it.item Attribute, 'LUCK'
            it.item 'net.minecraft.core.Holder', 'LUCK'
        }
    }
    mapClass('net.minecraft.network.protocol.game.ServerboundInteractPacket') {
        field int, 'entityId'
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket') {
        constructor int // 1.17
        constructor int[]
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket') {
        constructor int, SynchedEntityData, boolean // <= 1.19.2
        constructor int, List // 1.19.3
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket') {
        constructor Entity // <= 1.21.1
        constructor int, 'net.minecraft.world.entity.PositionMoveRotation', Set, boolean // 1.21.2+
    }
    mapClass('net.minecraft.world.entity.PositionMoveRotation') { // 1.21.2+
        method it.name, 'of', 'net.minecraft.world.entity.Entity'
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetExperiencePacket') {
        constructor float, int, int
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundAddEntityPacket') {
        constructor LivingEntity // 1.19-1.19.2
        constructor Entity // 1.19.3-1.20.6
        constructor int, UUID, double, double, double, float, float, 'net.minecraft.world.entity.EntityType', int, 'net.minecraft.world.phys.Vec3', double // used 1.21+
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundAddMobPacket') {
        constructor LivingEntity
    }
    var ClientboundSetTitlesPacket$Type = mapClass('net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type') { // 1.16.5 and lower
        enumConstant 'TITLE'
        enumConstant 'SUBTITLE'
        enumConstant 'TIMES'
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetTitlesPacket') {
        constructor ClientboundSetTitlesPacket$Type, Component
        constructor ClientboundSetTitlesPacket$Type, Component, int, int, int
    }
    var EnumParticle = mapClass('net.minecraft.server.VVV.EnumParticle') // 1.8.8, Spigot mapped
    mapClass('net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket') {
        constructor EnumParticle, boolean, float, float, float, float, float, float, float, int, int[]
    }
    var Goal = mapClass('net.minecraft.world.entity.ai.goal.Goal')
    mapClass('net.minecraft.world.entity.ai.goal.GoalSelector') {
        constructor Supplier // <= 1.21.1
        constructor() // 1.21.2+
        method void, 'addGoal', int, Goal
    }
    mapClass('net.minecraft.world.entity.ai.goal.MeleeAttackGoal') {
        constructor PathfinderMob, double, boolean
    }
    mapClass('net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal') {
        constructor Mob, Class, boolean // 1.14+
        constructor 'net.minecraft.server.VVV.EntityCreature', Class, boolean // <= 1.13.2, Spigot mapped
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundTabListPacket') {
        constructor()
        constructor Component, Component
        field Component, 'header'
        field Component, 'footer'
    }
    mapClass('net.minecraft.world.damagesource.CombatTracker') {
        getter Component, 'deathMessage'
        method void, 'recheckStatus'
    }
    mapClass('net.minecraft.world.entity.player.Player') {
        method void, 'removeEntitiesOnShoulder'
    }
    mapClass('net.minecraft.world.entity.boss.wither.WitherBoss') {
        constructor 'net.minecraft.server.VVV.World' // Spigot mapped
    }
    mapClass('net.minecraft.world.entity.boss.enderdragon.EnderDragon') {
        constructor 'net.minecraft.server.VVV.World' // Spigot mapped
        field 'net.minecraft.world.entity.boss.EnderDragonPart[]', 'subEntities'
    }
    mapClass('net.minecraft.world.entity.ai.goal.FloatGoal') {
        constructor Mob
    }
    mapClass('net.minecraft.world.entity.ai.goal.RandomStrollGoal') {
        constructor PathfinderMob, double
    }
    mapClass('net.minecraft.world.entity.ai.goal.RandomLookAroundGoal') {
        constructor Mob
    }
    mapClass('net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal') {
        constructor 'net.minecraft.server.VVV.EntityCreature', boolean, Class[] // old, Spigot mapped
        constructor PathfinderMob, Class[] // new
    }
    mapClass('net.minecraft.world.entity.animal.IronGolem')
    var EntityType = mapClass('net.minecraft.world.entity.EntityType') {
        enumConstant 'TEXT_DISPLAY'
    }
    var Display$BillboardConstraints = mapClass('net.minecraft.world.entity.Display$BillboardConstraints') {
        enumConstant 'CENTER'
    }
    mapClass('net.minecraft.world.entity.Display') {
        setter Display$BillboardConstraints, 'billboardConstraints'
    }
    mapClass('net.minecraft.world.entity.Display$TextDisplay') {
        constructor EntityType, Level

        getter Component, 'text'
        setter Component, 'text'
    }
    mapClass('net.minecraft.world.item.ItemStack') {
        method(void, 'setTag', CompoundTag)

        // 1.20.5+
        method(java.util.Optional, 'parse', 'net.minecraft.core.HolderLookup$Provider', 'net.minecraft.nbt.Tag')
     }

    mapClass('net.minecraft.server.MinecraftServer') {
        method('net.minecraft.core.RegistryAccess$Frozen', 'registryAccess')
    }
}
