import me.kcra.takenaka.gradle.BuildConfig

import java.util.function.Consumer
import java.util.function.Supplier

apply plugin: 'me.kcra.takenaka.accessor'

dependencies {
    mappingBundle "me.kcra.takenaka:mappings:1.8.8+1.20.1-SNAPSHOT"
    api "me.kcra.takenaka:generator-accessor-runtime:${BuildConfig.BUILD_VERSION}"
}

// after any changes in this file, please run the generateAccessors task to see changes in your ide

accessors {
    // uncomment this and remove the mappingBundle dependency,
    // if you want to develop against custom versions
    /*versionRange('1.8.8', '1.20.1') {
        // exclude 1.16 and 1.10.1, they don't have most mappings and are basically not used at all
        // exclude 1.8.9, client-only update - no Spigot mappings, no thank you
        // exclude 1.9.1 and 1.9.3 - no mappings at all
        exclude '1.16', '1.10.1', '1.8.9', '1.9.1', '1.9.3'

        // include only releases, no snapshots
        includeTypes 'release'
    }*/

    basePackage 'org.screamingsandals.bedwars.lib.nms.accessors'
    accessedNamespaces 'spigot'
    accessorType 'reflection'

    var CompoundTag = mapClass('net.minecraft.nbt.CompoundTag') {
        constructor()
        method void, 'putInt', String, int
    }
    var Component = mapClass('net.minecraft.network.chat.Component') {
        getter String, 'coloredString'
        getter String, 'string'
    }
    var Attribute = mapClass 'net.minecraft.world.entity.ai.attributes.Attribute'
    mapClass('net.minecraft.network.chat.Component$Serializer') {
        method Component, 'fromJson', String // 1.16 and below
        method 'net.minecraft.network.chat.MutableComponent', 'fromJson', String // 1.16.1 and higher
    }
    var SynchedEntityData = mapClass('net.minecraft.network.syncher.SynchedEntityData') {
        method void, 'watch', int, Object
        method List, 'packDirty'
        method void, 'clearDirty'
        getter List, 'all'
        getter List, 'nonDefaultValues'
    }
    var Level = mapClass('net.minecraft.world.level.Level') {
        getter Supplier, 'profilerSupplier' // 1.17 and newer
        getter 'net.minecraft.util.profiling.ProfilerFiller', 'profiler' // for something between new and old versions
        field 'net.minecraft.server.VVV.MethodProfiler', 'methodProfiler' // for older versions, Spigot mapped
    }
    var Entity = mapClass('net.minecraft.world.entity.Entity') {
        field Level, 'level'
        getter Level, 'commandSenderWorld'
        method boolean, 'saveAsPassenger', CompoundTag
        method void, 'load', CompoundTag
        method void, 'absMoveTo', double, double, double, float, float
        getter int, 'id'
        getter SynchedEntityData, 'entityData'
        getter Component, 'customName'
        setter Component, 'customName'
        getter double, 'x'
        getter double, 'y'
        getter double, 'z'
        getter float, 'xRot'
        getter float, 'yRot'
        method boolean, 'isCustomNameVisible'
        setter boolean, 'customNameVisible'
        method boolean, 'isInvisible'
        setter boolean, 'invisible'
        method boolean, 'isNoGravity'
        setter boolean, 'noGravity'
        // old
        field float, 'yRot'
        field float, 'xRot'
        field double, 'x'
        field double, 'y'
        field double, 'z'
        setter String, 'customName' // Spigot mapped
    }
    mapClass('net.minecraft.world.entity.decoration.ArmorStand') {
        constructor Level, double, double, double
        method boolean, 'isSmall'
        setter boolean, 'small'
        method boolean, 'isShowArms'
        setter boolean, 'showArms'
        method boolean, 'isNoBasePlate'
        setter boolean, 'noBasePlate'
        method boolean, 'isMarker'
        setter boolean, 'marker'
    }
    var PathfinderMob = mapClass 'net.minecraft.world.entity.PathfinderMob'
    var AttributeSupplier = mapClass('net.minecraft.world.entity.ai.attributes.AttributeSupplier') {
        field Map, 'instances'
    }
    var AttributeInstance = mapClass('net.minecraft.world.entity.ai.attributes.AttributeInstance') {
        constructor Attribute, Consumer
        getter double, 'value'
        setter double, 'baseValue'
    }
    var AttributeMap = mapClass('net.minecraft.world.entity.ai.attributes.AttributeMap') {
        method AttributeInstance, 'registerAttribute', Attribute
        field AttributeSupplier, 'supplier'
    }
    var LivingEntity = mapClass('net.minecraft.world.entity.LivingEntity') {
        method AttributeInstance, 'getAttribute', Attribute
        getter AttributeMap, 'attributes'
        getter 'net.minecraft.world.damagesource.CombatTracker', 'combatTracker'
    }
    var Mob = mapClass('net.minecraft.world.entity.Mob') {
        field 'net.minecraft.world.entity.ai.goal.GoalSelector', 'goalSelector'
        field 'net.minecraft.world.entity.ai.goal.GoalSelector', 'targetSelector'
        field LivingEntity, 'target'
    }
    var Packet = mapClass('net.minecraft.network.protocol.Packet')
    var ServerboundClientCommandPacket$Action = mapClass('net.minecraft.network.protocol.game.ServerboundClientCommandPacket$Action') {
        enumConstant 'PERFORM_RESPAWN'
    }
    var ServerboundClientCommandPacket = mapClass('net.minecraft.network.protocol.game.ServerboundClientCommandPacket') {
        constructor ServerboundClientCommandPacket$Action
    }
    var Connection = mapClass('net.minecraft.network.Connection') {
        field 'io.netty.channel.Channel', 'channel'
    }
    var ServerGamePacketListenerImpl = mapClass('net.minecraft.server.network.ServerGamePacketListenerImpl') {
        field Connection, 'connection'
        method void, 'send', Packet
        method void, 'handleClientCommand', ServerboundClientCommandPacket
    }
    mapClass('net.minecraft.server.level.ServerPlayer') {
        field ServerGamePacketListenerImpl, 'connection'
        method void, 'tellNeutralMobsThatIDied'
        setter Entity, 'camera'
    }
    mapClass('net.minecraft.world.entity.ai.attributes.Attributes') {
        field Attribute, 'MAX_HEALTH'
        field Attribute, 'FOLLOW_RANGE'
        field Attribute, 'KNOCKBACK_RESISTANCE'
        field Attribute, 'MOVEMENT_SPEED'
        field Attribute, 'FLYING_SPEED'
        field Attribute, 'ATTACK_DAMAGE'
        field Attribute, 'ATTACK_KNOCKBACK'
        field Attribute, 'ATTACK_SPEED'
        field Attribute, 'ARMOR'
        field Attribute, 'ARMOR_TOUGHNESS'
        field Attribute, 'LUCK'
    }
    mapClass('net.minecraft.network.protocol.game.ServerboundInteractPacket') {
        field int, 'entityId'
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket') {
        constructor int // 1.17
        constructor int[]
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket') {
        constructor int, SynchedEntityData, boolean // <= 1.19.2
        constructor int, List // 1.19.3
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket') {
        constructor Entity
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetExperiencePacket') {
        constructor float, int, int
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundAddEntityPacket') {
        constructor LivingEntity // 1.19-1.19.2
        constructor Entity // 1.19.3
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundAddMobPacket') {
        constructor LivingEntity
    }
    var ClientboundSetTitlesPacket$Type = mapClass('net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type') { // 1.16.5 and lower
        enumConstant 'TITLE'
        enumConstant 'SUBTITLE'
        enumConstant 'TIMES'
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundSetTitlesPacket') {
        constructor ClientboundSetTitlesPacket$Type, Component
        constructor ClientboundSetTitlesPacket$Type, Component, int, int, int
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket')
    var Goal = mapClass('net.minecraft.world.entity.ai.goal.Goal')
    mapClass('net.minecraft.world.entity.ai.goal.GoalSelector') {
        constructor Supplier
        method void, 'addGoal', int, Goal
    }
    mapClass('net.minecraft.world.entity.ai.goal.MeleeAttackGoal') {
        constructor PathfinderMob, double, boolean
    }
    mapClass('net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal') {
        constructor Mob, Class, boolean // 1.14+
        constructor 'net.minecraft.server.VVV.EntityCreature', Class, boolean // <= 1.13.2, Spigot mapped
    }
    mapClass('net.minecraft.network.protocol.game.ClientboundTabListPacket') {
        constructor()
        constructor Component, Component
        field Component, 'header'
        field Component, 'footer'
    }
    mapClass('net.minecraft.world.damagesource.CombatTracker') {
        getter Component, 'deathMessage'
        method void, 'recheckStatus'
    }
    mapClass('net.minecraft.world.entity.player.Player') {
        method void, 'removeEntitiesOnShoulder'
    }
    mapClass('net.minecraft.world.entity.boss.wither.WitherBoss') {
        constructor 'net.minecraft.server.VVV.World' // Spigot mapped
    }
    mapClass('net.minecraft.world.entity.boss.enderdragon.EnderDragon') {
        constructor 'net.minecraft.server.VVV.World' // Spigot mapped
        field 'net.minecraft.world.entity.boss.EnderDragonPart[]', 'subEntities'
    }
    mapClass('net.minecraft.world.entity.ai.goal.FloatGoal') {
        constructor Mob
    }
    mapClass('net.minecraft.world.entity.ai.goal.RandomStrollGoal') {
        constructor PathfinderMob, double
    }
    mapClass('net.minecraft.world.entity.ai.goal.RandomLookAroundGoal') {
        constructor Mob
    }
    mapClass('net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal') {
        constructor 'net.minecraft.server.VVV.EntityCreature', boolean, Class[] // old, Spigot mapped
        constructor PathfinderMob, Class[] // new
    }
    mapClass('net.minecraft.world.entity.animal.IronGolem')
    var EntityType = mapClass('net.minecraft.world.entity.EntityType') {
        enumConstant 'TEXT_DISPLAY'
    }
    var Display$BillboardConstraints = mapClass('net.minecraft.world.entity.Display$BillboardConstraints') {
        enumConstant 'CENTER'
    }
    mapClass('net.minecraft.world.entity.Display') {
        setter Display$BillboardConstraints, 'billboardConstraints'
    }
    mapClass('net.minecraft.world.entity.Display$TextDisplay') {
        constructor EntityType, Level

        getter Component, 'text'
        setter Component, 'text'
    }
}
