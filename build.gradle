import org.screamingsandals.gradle.builder.MavenUtilities
import org.screamingsandals.gradle.builder.Utilities
import org.screamingsandals.gradle.builder.JavadocUtilities

plugins {
    alias libs.plugins.screaming.plugin.builder apply false
    alias libs.plugins.screaming.plugin.slib apply false
    alias libs.plugins.buildconfig apply false
    alias libs.plugins.lombok apply false
}

defaultTasks 'clean', 'build'

subprojects {
    apply plugin: 'java'

    apply plugin: 'org.screamingsandals.plugin-builder'

    apply plugin: 'io.freefair.lombok'

    def mavenPublication = null
    Utilities.configureLicenser(project)
    if (project.name == 'BedWars-API' && project.name == 'BedWars' && project.name == 'BedWars-protocol') {
        Utilities.configureSourceJarTasks(project)
        mavenPublication = MavenUtilities.setupPublishing(project)
        if (!version.toString().endsWith('-SNAPSHOT') && project.name == 'BedWars-API') {
            JavadocUtilities.configureJavadocTasks(project)
        }
        Utilities.setupMavenRepositoriesFromProperties(project)
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://repo.screamingsandals.org/public/' }
        maven { url 'https://repo.papermc.io/repository/maven-snapshots/' }
        maven { url 'https://repo.onarandombox.com/content/groups/public'  }
        maven { url 'https://repo.codemc.org/repository/maven-public/'  }
        maven { url 'https://repo.alessiodp.com/releases/'  }
    }

    dependencies {
        compileOnly libs.jetbrains.annotations
    }

    sourceCompatibility = '11.0'

    compileJava {
        options.encoding = "UTF-8"
    }

    if (project.name == 'BedWars-protocol') {
        return // not Slib project
    }

    apply plugin: 'org.screamingsandals.plugin-slib'

    slib {
        version(libs.versions.screaming.lib)

        multiModulePlatforms('BedWars-%s', 'bukkit')
        multiModuleUniversalSubproject('BedWars') // custom name
        // This also means we cannot create class Wrapper and package types in package org.screamingsandals.bedwars.api
        multiModuleApiSubproject('BedWars-API', 'org.screamingsandals.bedwars.api')
        useApiConfigurationInsteadOfImplementation(true)

        additionalContent {
            module('cloud')
            module('hologram')
            module('placeholders')
            module('sidebar')
            module('healthindicator')
            module('npc')
            module('signs')
            module('economy')
            module('ai')
            module('fakedeath')

            lang()
            singleModule('cloud-extras')

            simpleInventories {
                version(libs.versions.simple.inventories)
            }
        }
    }

    Utilities.configureShadowPlugin(project, mavenPublication)

    configurations.all {
        // Check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    shadowJar {
        relocate 'com.zaxxer', 'org.screamingsandals.bedwars.lib.HikariCP'
        relocate 'org.bstats', 'org.screamingsandals.bedwars.lib.ext.bstats'
        relocate 'org.spongepowered.configurate', 'org.screamingsandals.bedwars.lib.ext.configurate'
        relocate 'org.yaml.snakeyaml', 'org.screamingsandals.bedwars.lib.ext.snakeyaml'
        relocate 'io.leangen.geantyref', 'org.screamingsandals.bedwars.lib.ext.geantyref'
        relocate 'cloud.commandframework', 'org.screamingsandals.bedwars.lib.ext.cloud'
        relocate 'me.lucko.commodore', 'org.screamingsandals.bedwars.lib.ext.commodore'

        if (System.getenv('BUILD_NUMBER') != null) {
            archiveClassifier.set(System.getenv('BUILD_NUMBER'))
        } else {
            archiveClassifier.set('dev')
        }
    }
}
